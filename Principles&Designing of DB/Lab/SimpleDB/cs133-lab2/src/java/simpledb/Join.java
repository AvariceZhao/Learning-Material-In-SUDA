package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
    //Join操作用于两张表的连接，需要两张表，这里以元组迭代器的形式给出，还需要连接条件p，即SQL中的JOIN ON ()
    //使用元组迭代器相比于直接给出整张表具有节省内存、提高效率、提高通用性等优点
    //连接条件joinpredicate p与filter的Predicate基本一致
    //不加条件的JOIN相当于笛卡尔积，实现过程中相当于在笛卡尔积的过程中不断使用条件筛选
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    //给出两个元组迭代器和连接条件p
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p=p;
        this.child1=child1;
        this.child2=child2;
    }

    //返回连接条件
    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    //返回第一个迭代器的JOIN条件的field的名称
    public String getJoinField1Name() {
      return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name. Can be taken from the appropriate child's TupleDesc.
     * */
    //返回第二个迭代器的JOIN条件的field的名称
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * Should return a TupleDesc that represents the schema for the joined tuples. 
     *@see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    //返回元组的描述
    public TupleDesc getTupleDesc() {
        return  TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    //开启迭代器
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    super.open();
        child1.open();
        child2.open();
    }

    //关闭迭代器
    public void close() {
    super.close();
        child1.close();
        child2.close();

    }
    //重置迭代器
    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator later on if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    //fetch next为获取下一个符合条件的JOIN结果，由于JOIN是两张表做笛卡尔积，相当于两重循环匹配
    // 即for tuple1 in table1 {for tuple2 in table 2 {if(tuple1 op tuple 2...)}}
    //这里只需要将循环改为迭代器写法即可
    private Tuple t1;
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while(child1.hasNext()||t1!=null)
        {
            if(child1.hasNext()&&t1==null)
            {
                t1 = child1.next();
            }
                while(child2.hasNext())
                {
                    Tuple t2=child2.next();
                    if(p.filter(t1,t2))
                    {
                        TupleDesc td=TupleDesc.merge(t1.getTupleDesc(),t2.getTupleDesc());
                        Tuple ans=new Tuple(td);
                        for(int i=0;i<t1.getTupleDesc().numFields();i++)
                            ans.setField(i,t1.getField(i));
                        for(int i=0;i<t2.getTupleDesc().numFields();i++)
                            ans.setField(i+t1.getTupleDesc().numFields(),t2.getField(i));
                        return ans;
                    }
                }
                t1=null;
                child2.rewind();



        }
        return null;
    }

    /**
     * See Operator.java for additional notes
     */
    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{this.child1,this.child2};
    }

    /**
     * See Operator.java for additional notes
     */
    @Override
    public void setChildren(DbIterator[] children) {
       this.child1=children[0];
       this.child2=children[1];
    }

}
